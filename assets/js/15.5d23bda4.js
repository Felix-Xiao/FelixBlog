(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{291:function(t,a,s){"use strict";s.r(a);var n=s(4),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"什么是对象？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是对象？"}},[t._v("#")]),t._v(" 什么是对象？")]),t._v(" "),s("h2",{attrs:{id:"对象的本质"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象的本质"}},[t._v("#")]),t._v(" 对象的本质")]),t._v(" "),s("ol",[s("li",[t._v("对象是具有唯一标识性的，即使完全相同的两个对象也不是同一个对象。")]),t._v(" "),s("li",[t._v("对象是具有状态的，同一对象可能处于不同状态之下。")]),t._v(" "),s("li",[t._v("对象是具有行为的，对象的状态可能因为他的行为发生改变。\n--《面向对象分析与设计》")])]),t._v(" "),s("p",[t._v("不同语言对于对象的描述：")]),t._v(" "),s("ul",[s("li",[t._v("用类的方式描述对象   C++ Java")]),t._v(" "),s("li",[t._v("用原型链的方式描述 JavaScript")])]),t._v(" "),s("p",[t._v("唯一标识  （内存地址）")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("语言")]),t._v(" "),s("th",[t._v("状态")]),t._v(" "),s("th",[t._v("行为")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("C++")]),t._v(" "),s("td",[t._v("成员变量")]),t._v(" "),s("td",[t._v("成员函数")])]),t._v(" "),s("tr",[s("td",[t._v("java")]),t._v(" "),s("td",[t._v("属性")]),t._v(" "),s("td",[t._v("方法")])]),t._v(" "),s("tr",[s("td",[t._v("Javascript")]),t._v(" "),s("td",[t._v("属性")]),t._v(" "),s("td",[t._v("属性")])])])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// An highlighted block")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tname："),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"max"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("js 独特的特性： 对象具有高度动态性 这是因为js赋予使用者在运行时修改对象状态和行为的能力")]),t._v(" "),s("p",[t._v("提高抽象能力：\n属性描述对象\n- 数据属性  value writeable enumerable configurable\n- 访问属性 get set")]),t._v(" "),s("p",[s("strong",[t._v("前端属性描述对象")]),t._v(" "),s("strong",[t._v("元属性")]),t._v("：")]),t._v(" "),s("blockquote",[s("ul",[s("li",[s("strong",[t._v("value")]),t._v(" 属性是目标属性的值。")]),t._v(" "),s("li",[s("strong",[t._v("writable")]),t._v(" 属性是一个布尔值，决定了目标属性的值（value）是否可以被改变。")]),t._v(" "),s("li",[s("strong",[t._v("enumerable")]),t._v("（可遍历性）返回一个布尔值，表示目标属性是否可遍历。")]),t._v(" "),s("li",[s("strong",[t._v("configurable")]),t._v(" (可配置性）返回一个布尔值，决定了是否可以修改属性描述对象。也 就是说，configurable为false时，value、writable、enumerable和configurable都不能被修改了。")]),t._v(" "),s("li",[s("strong",[t._v("存取器")]),t._v("  除了直接定义以外，属性还可以用存取器（accessor）定义。其中，存值函数称为setter，使用属性描述对象的set属性；取值函数称为getter，使用属性描述对象的get属性。")])])]),t._v(" "),s("p",[t._v("数字的直接量")]),t._v(" "),s("p",[t._v("对象 属性")]),t._v(" "),s("p",[s("strong",[t._v("装箱转换")])]),t._v(" "),s("p",[t._v('每一种基本类型Number String Boolean 在对象中都有对应的类（产生临时对象）\n1 .toString()   => "1"')]),t._v(" "),s("p",[s("strong",[t._v("拆箱操作")]),t._v("\n在js中，想要将对象转换成原始值，必然会调用toPrimitive()内部函数，那么它是如何工作的呢？")]),t._v(" "),s("pre",[s("code",[t._v("该函数形式如下：\n")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toPrimitive")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("preferedType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("input是输入的值，preferedType是期望转换的类型，他可以是字符串，也可以是数字。")]),t._v(" "),s("p",[t._v("如果转换的类型是number，会执行以下步骤：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("如果input是原始值，直接返回这个值；")])]),t._v(" "),s("li",[s("p",[t._v("否则，如果input是对象，调用input.valueOf()，如果结果是原始值，返回结果；")])]),t._v(" "),s("li",[s("p",[t._v("否则，调用input.toString()。如果结果是原始值，返回结果；")])]),t._v(" "),s("li",[s("p",[t._v("否则，抛出错误。")])])]),t._v(" "),s("p",[t._v("如果转换的类型是String，2和3会交换执行，即先执行toString()方法。")]),t._v(" "),s("p",[t._v("你也可以省略preferedType，此时，日期会被认为是字符串，而其他的值会被当做Number。")]),t._v(" "),s("p",[t._v("综上所述，会有以下计算结果：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// An highlighted block")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//''")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[Object, Object]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//0")]),t._v("\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('>[]+[]\n>""\n')])])]),s("p",[t._v("加号操作符会将preferedType看成Number，调用ES内部的toPrimitive(input，Number)方法，得到空字符串")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('>[]+{}\n>"[object Object]"\n')])])]),s("p",[t._v("最终会调用双方的toString()方法，再做字符串加法")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(">{}+[]\n>0\n")])])]),s("p",[t._v("但是空对象加空数组就不一样了，加号运算符的定义是这样的："),s("strong",[t._v("如果其中一个是字符串，另一个也会被转换为字符串，否则两个运算数都被转换为数字")]),t._v("。而同时，javascript有这样的特性，"),s("strong",[t._v("如果{}既可以被认为是代码块，又可以被认为是对象字面量，那么js会把他当做代码块来看待")]),t._v("。")]),t._v(" "),s("p",[t._v("这就很好解释了，{}被当做了代码块，只有+[]，根据加法的定义，被转换为0，就得到了结果。")]),t._v(" "),s("p",[s("strong",[t._v("操作符中，==，排序运算符，加减乘除，在对非原始值进行操作时，都会调用内部的toPrimitive()方法。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);